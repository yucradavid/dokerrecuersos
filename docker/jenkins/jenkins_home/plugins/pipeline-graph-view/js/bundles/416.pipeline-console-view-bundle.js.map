{"version":3,"file":"416.pipeline-console-view-bundle.js","mappings":"iSAWIA,EAAU,CAAC,EAEfA,EAAQC,kBAAoB,IAC5BD,EAAQE,cAAgB,IACxBF,EAAQG,OAAS,SAAc,KAAM,QACrCH,EAAQI,OAAS,IACjBJ,EAAQK,mBAAqB,IAEhB,IAAI,IAASL,GAKJ,KAAW,IAAQM,QAAS,IAAQA,O,cCjB3C,SAASC,EAAUC,GAId,IAHlBC,EAAMD,EAANC,OACAC,EAAUF,EAAVE,WACAC,EAAQH,EAARG,SAGMC,EAAyB,YAAXH,EAAuB,GAAK,EAC1CI,GAFc,IAEUD,GAAe,IACvCE,EAAgB,EAAIC,KAAKC,GAAKH,EAC9BI,EAASH,GAAkBJ,QAAAA,EAAc,KAAO,IAAOI,EAE7D,OACEI,EAAAA,cAAA,OACEC,QAAO,OAAAC,OARS,IAQW,KAAAA,OARX,KAShBC,UAAW,mBAAqBC,EAAcb,EAAQE,GACtDY,QAASZ,EAAW,GAAM,GAE1BO,EAAAA,cAAA,UACEM,GAAIC,IACJC,GAAID,IACJE,EAAGd,EACHe,KAAK,wCACLC,MAAO,CACLC,WAAY,gCAGhBZ,EAAAA,cAAA,UACEM,GAAIC,IACJC,GAAID,IACJE,EAAGd,EAAS,GACZe,KAAK,OACLG,OAAO,eACPnB,YAAa,GACboB,cAAe,MAEjBd,EAAAA,cAAA,UACEM,GAAIC,IACJC,GAAID,IACJE,EAAGd,EACHe,KAAK,OACLG,OAAO,eACPnB,YAAaA,EACbqB,cAAc,QACdC,gBAAiBpB,EACjBqB,iBAAkBlB,EAClBY,MAAO,CACLO,UAAW,iBACXC,gBAAiB,UACjBP,WAAY,gCAIhBZ,EAAAA,cAACoB,EAAK,CAACC,cAAe9B,EAAQA,OAAQ+B,EAAAA,EAAOC,SAC3CvB,EAAAA,cAAA,UACEM,GAAG,MACHE,GAAG,MACHC,EAAE,KACFC,KAAK,eACLP,UAAsB,YAAXZ,EAAuB,YAAc,MAIpDS,EAAAA,cAACoB,EAAK,CAACC,cAAe9B,EAAQA,OAAQ+B,EAAAA,EAAOE,SAC3CxB,EAAAA,cAAA,QACEyB,EAAE,6BACFf,KAAK,cACLG,OAAO,eACPnB,YAAa,GACbqB,cAAc,QACdW,eAAe,WAInB1B,EAAAA,cAACoB,EAAK,CAACC,cAAe9B,EAAQA,OAAQ+B,EAAAA,EAAOK,SAC3C3B,EAAAA,cAAA,QACEU,KAAK,OACLG,OAAO,eACPE,cAAc,QACdW,eAAe,QACfhC,YAAa,GACb+B,EAAE,sCAINzB,EAAAA,cAACoB,EAAK,CAACC,cAAe9B,EAAQA,OAAQ+B,EAAAA,EAAOM,SAC3C5B,EAAAA,cAAA,QACEU,KAAK,OACLG,OAAO,eACPE,cAAc,QACdW,eAAe,QACfhC,YAAa,GACb+B,EAAE,sBAINzB,EAAAA,cAACoB,EAAK,CAACC,cAAe9B,EAAQA,OAAQ+B,EAAAA,EAAOO,UAC3C7B,EAAAA,cAAA,QACEyB,EAAE,oFACFf,KAAK,OACLG,OAAO,eACPE,cAAc,QACdW,eAAe,QACfhC,YAAa,KAEfM,EAAAA,cAAA,WAASM,GAAG,MAAME,GAAG,MAAMsB,GAAG,KAAKC,GAAG,KAAKrB,KAAK,kBAGlDV,EAAAA,cAACoB,EAAK,CAACC,cAAe9B,EAAQA,OAAQ+B,EAAAA,EAAOU,SAC3ChC,EAAAA,cAAA,QACEyB,EAAE,2JACFf,KAAK,kBAITV,EAAAA,cAACoB,EAAK,CAACC,cAAe9B,EAAQA,OAAQ+B,EAAAA,EAAOW,QAC3CjC,EAAAA,cAAA,QACEU,KAAK,OACLG,OAAO,eACPE,cAAc,QACdmB,iBAAiB,KACjBxC,YAAa,GACb+B,EAAE,8BAINzB,EAAAA,cAACoB,EAAK,CAACC,cAAe9B,EAAQA,OAAQ+B,EAAAA,EAAOa,WAC3CnC,EAAAA,cAAA,UAAQM,GAAG,MAAME,GAAG,MAAMC,EAAE,KAAKC,KAAK,iBACtCV,EAAAA,cAAA,UAAQM,GAAG,MAAME,GAAG,MAAMC,EAAE,KAAKC,KAAK,iBACtCV,EAAAA,cAAA,UAAQM,GAAG,MAAME,GAAG,MAAMC,EAAE,KAAKC,KAAK,kBAGxCV,EAAAA,cAACoB,EAAK,CAACC,cAAe9B,EAAQA,OAAQ+B,EAAAA,EAAOc,SAC3CpC,EAAAA,cAAA,QACEyB,EAAE,gLACFf,KAAK,OACLG,OAAO,eACPE,cAAc,QACdmB,iBAAiB,KACjBxC,YAAY,OAEdM,EAAAA,cAAA,UAAQM,GAAG,MAAME,GAAG,MAAMC,EAAE,KAAKC,KAAK,kBAI9C,CAEA,SAASU,EAAKiB,GAQX,IAPDhB,EAAagB,EAAbhB,cACA9B,EAAM8C,EAAN9C,OACA+C,EAAQD,EAARC,SAMA,OACEtC,EAAAA,cAAA,KACEW,MAAO,CACLO,UAAWG,IAAkB9B,EAAS,WAAa,WACnDc,QAASgB,IAAkB9B,EAAS,EAAI,IAGzC+C,EAGP,CAEO,SAASlC,EAAcmC,EAAgB9C,GAC5C,GAAIA,EACF,MAAO,0BAGT,OAAQ8C,GACN,IAAK,UACH,MAAO,0BACT,IAAK,UACH,MAAO,wBACT,IAAK,UACH,MAAO,yBACT,IAAK,WACH,MAAO,0BACT,QACE,MAAO,0BAEb,C,qDC/LA,IAAMC,EAAwB,IACxBC,EAAwB,GAAKD,EAC7BE,EAAsB,GAAKD,EAC3BE,EAAqB,GAAKD,EAC1BE,EAAuB,GAAKD,EAC5BE,EAAsB,IAAMF,EAWlC,SAASG,EACPC,EACAC,EACAC,EACAC,GAEA,OAAOH,EAAU,GAAK,GAAH7C,OAAM8C,EAAQ,KAAA9C,OAAIgD,GAAeF,CACtD,CASA,SAASG,EAAkBC,GACzB,IAAMC,EAAQxD,KAAKyD,MAAMF,EAAWP,GACpCO,GAAYP,EACZ,IAAMU,EAAS1D,KAAKyD,MAAMF,EAAWR,GACrCQ,GAAYR,EACZ,IAAMY,EAAO3D,KAAKyD,MAAMF,EAAWT,GACnCS,GAAYT,EACZ,IAAMc,EAAQ5D,KAAKyD,MAAMF,EAAWV,GACpCU,GAAYV,EACZ,IAAMgB,EAAU7D,KAAKyD,MAAMF,EAAWX,GACtCW,GAAYX,EACZ,IAAMkB,EAAU9D,KAAKyD,MAAMF,EAAWZ,GAChCoB,EAASR,EAAWZ,EAE1B,OAAIa,EAAQ,EACHP,EAAmBO,EAAO,GAAFnD,OAAKmD,EAAK,OAAOE,EAAQ,GAAFrD,OAAKqD,EAAM,QACxDA,EAAS,EACXT,EAAmBS,EAAQ,GAAFrD,OAAKqD,EAAM,OAAOC,EAAM,GAAFtD,OAAKsD,EAAI,SACtDA,EAAO,EACTV,EAAmBU,EAAM,GAAFtD,OAAKsD,EAAI,QAAQC,EAAO,GAAFvD,OAAKuD,EAAK,QACrDA,EAAQ,EACVX,EAAmBW,EAAO,GAAFvD,OAAKuD,EAAK,OAAOC,EAAS,GAAFxD,OAAKwD,EAAO,SAC1DA,EAAU,EACZZ,EACLY,EAAO,GAAAxD,OACJwD,EAAO,QACVC,EAAO,GAAAzD,OACJyD,EAAO,SAEHA,GAAW,GACb,GAAPzD,OAAUyD,EAAO,QACRA,GAAW,EACb,GAAPzD,OAAUyD,EAAU9D,KAAKyD,MAAMM,EAAS,KAAO,GAAE,QACxCA,GAAU,IACZ,GAAP1D,OAAUL,KAAKyD,MAAMM,EAAS,IAAM,IAAG,QAEhC,GAAP1D,OAAU0D,EAAM,MAEpB,CAEO,SAASC,EAAMC,GACpB,MAAO,GAAP5D,OAAUiD,EAAkBW,GAC9B,CAEO,SAAS7B,EAAO8B,GACrB,MAAO,UAAP7D,OAAiBiD,EAAkBY,GACrC,CAEO,SAASC,EAAQD,GACtB,OAAgB,GAATA,EACH,GAAE,WAAA7D,OACSiD,EAAkBtD,KAAKoE,IAAIF,EAAQG,KAAKC,QAAO,OAChE,C,2EChDqCnE,EAAAA,U,gBCdCA,EAAAA,S,mECnBlCoE,E,MAA0B,GAA4B,KAE1DA,EAAwBC,KAAK,CAACC,EAAOC,GAAI,6RAA8R,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,oEAAoE,MAAQ,GAAG,SAAW,8GAA8G,eAAiB,CAAC,ybAAyb,WAAa,MAElgC,S","sources":["webpack://pipeline-graph-view-plugin/./src/main/frontend/common/components/status-icon.scss?a670","webpack://pipeline-graph-view-plugin/./src/main/frontend/common/components/status-icon.tsx","webpack://pipeline-graph-view-plugin/./src/main/frontend/common/utils/timings.ts","webpack://pipeline-graph-view-plugin/./src/main/frontend/pipeline-graph-view/pipeline-graph/main/support/TruncatingLabel.tsx","webpack://pipeline-graph-view-plugin/./src/main/frontend/pipeline-graph-view/pipeline-graph/main/support/connections.tsx","webpack://pipeline-graph-view-plugin/./src/main/frontend/common/components/status-icon.scss"],"sourcesContent":["\n      import API from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/sass-loader/dist/cjs.js!./status-icon.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn.bind(null, \"head\");\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/sass-loader/dist/cjs.js!./status-icon.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","import React from \"react\";\nimport \"./status-icon.scss\";\nimport { Result } from \"../../pipeline-graph-view/pipeline-graph/main\";\n\n/**\n * Visual representation of a job or build status\n */\nexport default function StatusIcon({\n  status,\n  percentage,\n  skeleton,\n}: StatusIconProps) {\n  const viewBoxSize = 512;\n  const strokeWidth = status === \"running\" ? 50 : 0;\n  const radius = (viewBoxSize - strokeWidth) / 2.2;\n  const circumference = 2 * Math.PI * radius;\n  const offset = circumference - ((percentage ?? 100) / 100) * circumference;\n\n  return (\n    <svg\n      viewBox={`0 0 ${viewBoxSize} ${viewBoxSize}`}\n      className={\"pgv-status-icon \" + resultToColor(status, skeleton)}\n      opacity={skeleton ? 0.5 : 1}\n    >\n      <circle\n        cx={viewBoxSize / 2}\n        cy={viewBoxSize / 2}\n        r={radius}\n        fill=\"oklch(from var(--color) l c h / 0.15)\"\n        style={{\n          transition: \"var(--standard-transition)\",\n        }}\n      />\n      <circle\n        cx={viewBoxSize / 2}\n        cy={viewBoxSize / 2}\n        r={radius - 10}\n        fill=\"none\"\n        stroke=\"var(--color)\"\n        strokeWidth={20}\n        strokeOpacity={0.15}\n      />\n      <circle\n        cx={viewBoxSize / 2}\n        cy={viewBoxSize / 2}\n        r={radius}\n        fill=\"none\"\n        stroke=\"var(--color)\"\n        strokeWidth={strokeWidth}\n        strokeLinecap=\"round\"\n        strokeDasharray={circumference}\n        strokeDashoffset={offset}\n        style={{\n          transform: \"rotate(-90deg)\",\n          transformOrigin: \"50% 50%\",\n          transition: \"var(--standard-transition)\",\n        }}\n      />\n\n      <Group currentStatus={status} status={Result.running}>\n        <circle\n          cx=\"256\"\n          cy=\"256\"\n          r=\"40\"\n          fill=\"var(--color)\"\n          className={status === \"running\" ? \"pgv-scale\" : \"\"}\n        />\n      </Group>\n\n      <Group currentStatus={status} status={Result.success}>\n        <path\n          d=\"M336 189L224 323L176 269.4\"\n          fill=\"transparent\"\n          stroke=\"var(--color)\"\n          strokeWidth={32}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </Group>\n\n      <Group currentStatus={status} status={Result.failure}>\n        <path\n          fill=\"none\"\n          stroke=\"var(--color)\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={32}\n          d=\"M320 320L192 192M192 320l128-128\"\n        />\n      </Group>\n\n      <Group currentStatus={status} status={Result.aborted}>\n        <path\n          fill=\"none\"\n          stroke=\"var(--color)\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={32}\n          d=\"M192 320l128-128\"\n        />\n      </Group>\n\n      <Group currentStatus={status} status={Result.unstable}>\n        <path\n          d=\"M250.26 166.05L256 288l5.73-121.95a5.74 5.74 0 00-5.79-6h0a5.74 5.74 0 00-5.68 6z\"\n          fill=\"none\"\n          stroke=\"var(--color)\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={32}\n        />\n        <ellipse cx=\"256\" cy=\"350\" rx=\"26\" ry=\"26\" fill=\"var(--color)\" />\n      </Group>\n\n      <Group currentStatus={status} status={Result.skipped}>\n        <path\n          d=\"M320 176a16 16 0 00-16 16v53l-111.68-67.44a10.78 10.78 0 00-16.32 9.31v138.26a10.78 10.78 0 0016.32 9.31L304 267v53a16 16 0 0032 0V192a16 16 0 00-16-16z\"\n          fill=\"var(--color)\"\n        />\n      </Group>\n\n      <Group currentStatus={status} status={Result.paused}>\n        <path\n          fill=\"none\"\n          stroke=\"var(--color)\"\n          strokeLinecap=\"round\"\n          strokeMiterlimit=\"10\"\n          strokeWidth={32}\n          d=\"M208 192v128M304 192v128\"\n        />\n      </Group>\n\n      <Group currentStatus={status} status={Result.not_built}>\n        <circle cx=\"256\" cy=\"256\" r=\"30\" fill=\"var(--color)\" />\n        <circle cx=\"352\" cy=\"256\" r=\"30\" fill=\"var(--color)\" />\n        <circle cx=\"160\" cy=\"256\" r=\"30\" fill=\"var(--color)\" />\n      </Group>\n\n      <Group currentStatus={status} status={Result.unknown}>\n        <path\n          d=\"M200 202.29s.84-17.5 19.57-32.57C230.68 160.77 244 158.18 256 158c10.93-.14 20.69 1.67 26.53 4.45 10 4.76 29.47 16.38 29.47 41.09 0 26-17 37.81-36.37 50.8S251 281.43 251 296\"\n          fill=\"none\"\n          stroke=\"var(--color)\"\n          strokeLinecap=\"round\"\n          strokeMiterlimit=\"10\"\n          strokeWidth=\"28\"\n        />\n        <circle cx=\"250\" cy=\"348\" r=\"20\" fill=\"var(--color)\" />\n      </Group>\n    </svg>\n  );\n}\n\nfunction Group({\n  currentStatus,\n  status,\n  children,\n}: {\n  currentStatus: Result;\n  status: Result;\n  children: React.ReactNode;\n}) {\n  return (\n    <g\n      style={{\n        transform: currentStatus !== status ? \"scale(0)\" : \"scale(1)\",\n        opacity: currentStatus !== status ? 0 : 1,\n      }}\n    >\n      {children}\n    </g>\n  );\n}\n\nexport function resultToColor(result: Result, skeleton: boolean | undefined) {\n  if (skeleton) {\n    return \"jenkins-!-skipped-color\";\n  }\n\n  switch (result) {\n    case \"success\":\n      return \"jenkins-!-success-color\";\n    case \"failure\":\n      return \"jenkins-!-error-color\";\n    case \"running\":\n      return \"jenkins-!-accent-color\";\n    case \"unstable\":\n      return \"jenkins-!-warning-color\";\n    default:\n      return \"jenkins-!-skipped-color\";\n  }\n}\n\ninterface StatusIconProps {\n  status: Result;\n  percentage?: number;\n  skeleton?: boolean;\n}\n","const ONE_SECOND_MS: number = 1000;\nconst ONE_MINUTE_MS: number = 60 * ONE_SECOND_MS;\nconst ONE_HOUR_MS: number = 60 * ONE_MINUTE_MS;\nconst ONE_DAY_MS: number = 24 * ONE_HOUR_MS;\nconst ONE_MONTH_MS: number = 30 * ONE_DAY_MS;\nconst ONE_YEAR_MS: number = 365 * ONE_DAY_MS;\n\n// TODO: 16/04/2025 How to support i18n like the methods this was copied from\n\n/**\n * Create a string representation of a time duration.\n * If the quantity of the most significant unit is big (>=10), then we use only that most significant unit in the string representation.\n * If the quantity of the most significant unit is small (a single-digit value), then we also use a secondary, smaller unit for increased precision.\n * So 13 minutes and 43 seconds returns just \"13 minutes\", but 3 minutes and 43 seconds is \"3 minutes 43 seconds\"\n * @see https://github.com/jenkinsci/jenkins/blob/f9edeb0c0485fddfc03a7e1710ac5cf2b35ec497/core/src/main/java/hudson/Util.java#L781\n */\nfunction makeTimeSpanString(\n  bigUnit: number,\n  bigLabel: string,\n  smallUnit: number,\n  smallLabel: string,\n): string {\n  return bigUnit < 10 ? `${bigLabel} ${smallLabel}` : bigLabel;\n}\n\n/**\n * Returns a human-readable text of the time duration, for example \"3 minutes 40 seconds\".\n * This version should be used for representing a duration of some activity (like build)\n * @see https://github.com/jenkinsci/jenkins/blob/f9edeb0c0485fddfc03a7e1710ac5cf2b35ec497/core/src/main/java/hudson/Util.java#L734\n *\n * @param duration number of milliseconds.\n */\nfunction getTimeSpanString(duration: number): string {\n  const years = Math.floor(duration / ONE_YEAR_MS);\n  duration %= ONE_YEAR_MS;\n  const months = Math.floor(duration / ONE_MONTH_MS);\n  duration %= ONE_MONTH_MS;\n  const days = Math.floor(duration / ONE_DAY_MS);\n  duration %= ONE_DAY_MS;\n  const hours = Math.floor(duration / ONE_HOUR_MS);\n  duration %= ONE_HOUR_MS;\n  const minutes = Math.floor(duration / ONE_MINUTE_MS);\n  duration %= ONE_MINUTE_MS;\n  const seconds = Math.floor(duration / ONE_SECOND_MS);\n  const millis = duration % ONE_SECOND_MS;\n\n  if (years > 0) {\n    return makeTimeSpanString(years, `${years} yr`, months, `${months} mo`);\n  } else if (months > 0) {\n    return makeTimeSpanString(months, `${months} mo`, days, `${days} day`);\n  } else if (days > 0) {\n    return makeTimeSpanString(days, `${days} day`, hours, `${hours} hr`);\n  } else if (hours > 0) {\n    return makeTimeSpanString(hours, `${hours} hr`, minutes, `${minutes} min`);\n  } else if (minutes > 0) {\n    return makeTimeSpanString(\n      minutes,\n      `${minutes} min`,\n      seconds,\n      `${seconds} sec`,\n    );\n  } else if (seconds >= 10) {\n    return `${seconds} sec`;\n  } else if (seconds >= 1) {\n    return `${seconds + Math.floor(millis / 100) / 10} sec`;\n  } else if (millis >= 100) {\n    return `${Math.floor(millis / 10) / 100} sec`;\n  } else {\n    return `${millis} ms`;\n  }\n}\n\nexport function total(ms: number): string {\n  return `${getTimeSpanString(ms)}`;\n}\n\nexport function paused(since: number): string {\n  return `Queued ${getTimeSpanString(since)}`;\n}\n\nexport function started(since: number): string {\n  return since == 0\n    ? \"\"\n    : `Started ${getTimeSpanString(Math.abs(since - Date.now()))} ago`;\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\n//--------------------------------------\n//  Safety constants\n//--------------------------------------\n\nconst MINLENGTH = 5; // Minimum size of cut-down text\nconst MAXLOOPS = 50; // Max no of iterations attempting to find the correct size text\n\n//--------------------------------------\n//  Render lifecycle\n//--------------------------------------\n\nenum RenderState {\n  INITIAL,\n  MEASURE, // Mounted, text/props changed, measurement needed.\n  FLUID, // Text too big, in the process of trimming it down\n  STABLE, // Done measuring until props change\n}\n\n//--------------------------------------\n//  Component\n//--------------------------------------\n\ninterface Props {\n  children?: string;\n  style?: Object;\n  className?: string;\n}\n\n/**\n * Multi-line label that will truncate with ellipses\n *\n * Use with a set width + height (or maxWidth / maxHeight) to get any use from it :D\n */\nexport class TruncatingLabel extends React.Component<Props> {\n  //--------------------------------------\n  //  Component state / lifecycle\n  //--------------------------------------\n\n  completeText = \"\"; // Unabridged plain text content\n  innerText = \"\"; // Current innerText of element - includes possible ellipses\n  renderState = RenderState.INITIAL; // Internal rendering lifecycle state\n  checkSizeRequest?: number; // window.requestAnimationFrame handle\n\n  //--------------------------------------\n  //  Binary search state\n  //--------------------------------------\n\n  textCutoffLength = 0; // Last count used to truncate completeText\n  longestGood = 0; // Length of the longest truncated text that fits\n  shortestBad = 0; // Length of the shortest truncated text that does not fit\n  loopCount = 0; // to avoid infinite iteration\n\n  //--------------------------------------\n  //  React Lifecycle\n  //--------------------------------------\n\n  componentWillMount() {\n    this.handleProps(this.props);\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    this.handleProps(nextProps);\n  }\n\n  componentDidMount() {\n    this.invalidateSize();\n  }\n\n  componentDidUpdate() {\n    this.invalidateSize();\n  }\n\n  componentWillUnmount() {\n    if (this.checkSizeRequest) {\n      cancelAnimationFrame(this.checkSizeRequest);\n      this.checkSizeRequest = 0;\n    }\n  }\n\n  //--------------------------------------\n  //  Render\n  //--------------------------------------\n\n  render() {\n    const { className = \"\" } = this.props;\n\n    const style: React.CSSProperties = this.props.style || {};\n\n    const mergedStyle: React.CSSProperties = {\n      overflow: \"hidden\",\n      wordWrap: \"break-word\",\n      ...style,\n    };\n\n    if (this.renderState !== RenderState.STABLE) {\n      mergedStyle.opacity = 0;\n    }\n\n    return (\n      <div\n        style={mergedStyle}\n        className={\"TruncatingLabel \" + className}\n        title={this.completeText}\n      >\n        {this.innerText}\n      </div>\n    );\n  }\n\n  //--------------------------------------\n  //  Internal Rendering Lifecycle\n  //--------------------------------------\n\n  handleProps(props: Props) {\n    const { children = \"\" } = props;\n\n    if (typeof children === \"string\") {\n      this.completeText = children;\n    } else if (children === null || children === false) {\n      this.completeText = \"\";\n    } else {\n      console.warn(\n        \"TruncatingLabel - Label children must be string but is\",\n        typeof children,\n        children,\n      );\n      this.completeText = \"Contents must be string\";\n    }\n\n    this.renderState = RenderState.MEASURE;\n    this.innerText = this.completeText;\n    this.loopCount = 0;\n    this.longestGood = MINLENGTH;\n    this.shortestBad = this.innerText.length;\n  }\n\n  invalidateSize() {\n    if (!this.checkSizeRequest) {\n      this.checkSizeRequest = requestAnimationFrame(() => this.checkSize());\n    }\n  }\n\n  checkSize() {\n    this.checkSizeRequest = 0;\n\n    if (this.renderState === RenderState.STABLE) {\n      return; // Nothing to check, no more checks to schedule\n    }\n\n    const thisElement = ReactDOM.findDOMNode(this) as HTMLElement;\n    const { scrollHeight, clientHeight, scrollWidth, clientWidth } =\n      thisElement;\n\n    const tooBig = scrollHeight > clientHeight || scrollWidth > clientWidth;\n\n    if (this.renderState === RenderState.MEASURE) {\n      // First measurement since mount / props changed\n\n      if (tooBig) {\n        this.renderState = RenderState.FLUID;\n\n        // Set initial params for binary search of length\n        this.longestGood = MINLENGTH;\n        this.textCutoffLength = this.shortestBad = this.innerText.length;\n      } else {\n        this.renderState = RenderState.STABLE;\n        this.forceUpdate(); // Re-render via react so it can update the alpha\n      }\n    }\n\n    if (this.renderState === RenderState.FLUID) {\n      this.loopCount++;\n\n      const lastLength = this.textCutoffLength;\n\n      let keepMeasuring;\n\n      if (this.loopCount >= MAXLOOPS) {\n        // This really shouldn't happen!\n        console.error(\"TruncatingLabel - TOO MANY LOOPS\");\n        keepMeasuring = false;\n      } else if (lastLength <= MINLENGTH) {\n        keepMeasuring = false;\n      } else if (Math.abs(this.shortestBad - this.longestGood) < 2) {\n        // We're done searching, hoorays!\n        keepMeasuring = false;\n      } else {\n        // Update search space\n        if (tooBig) {\n          this.shortestBad = Math.min(this.shortestBad, lastLength);\n        } else {\n          this.longestGood = Math.max(this.longestGood, lastLength);\n        }\n\n        // Calculate the next length and update the text\n        this.textCutoffLength = Math.floor(\n          (this.longestGood + this.shortestBad) / 2,\n        );\n        this.innerText =\n          this.completeText.substr(0, this.textCutoffLength) + \"…\";\n\n        // Bypass react's render loop during the \"fluid\" state for performance\n        thisElement.innerText = this.innerText;\n        keepMeasuring = true;\n      }\n\n      if (keepMeasuring) {\n        this.invalidateSize();\n      } else {\n        this.renderState = RenderState.STABLE;\n        this.forceUpdate(); // Re-render via react so it knows about updated alpha and final content\n      }\n    }\n  }\n}\n","import * as React from \"react\";\n\nimport { nodeStrokeWidth } from \"../support/StatusIcons\";\nimport {\n  CompositeConnection,\n  LayoutInfo,\n  NodeInfo,\n} from \"../PipelineGraphModel\";\nimport { sequentialStagesLabelOffset } from \"../PipelineGraphLayout\";\n\ntype SVGChildren = Array<any>; // Fixme: Maybe refine this? Not sure what should go here, we have working code I can't make typecheck\n\n// Generate a react key for a connection\nfunction connectorKey(leftNode: NodeInfo, rightNode: NodeInfo) {\n  return \"c_\" + leftNode.key + \"_to_\" + rightNode.key;\n}\n\ninterface Props {\n  connections: Array<CompositeConnection>;\n  layout: LayoutInfo;\n}\n\nexport class GraphConnections extends React.Component {\n  props!: Props;\n\n  /**\n   * Generate SVG for a composite connection, which may be to/from many nodes.\n   *\n   * Farms work out to other methods on self depending on the complexity of the line required. Adds all the SVG\n   * components to the elements list.\n   */\n  private renderCompositeConnection(\n    connection: CompositeConnection,\n    svgElements: SVGChildren,\n  ) {\n    const { sourceNodes, destinationNodes, skippedNodes, hasBranchLabels } =\n      connection;\n\n    if (skippedNodes.length === 0) {\n      // Nothing too complicated, use the original connection drawing code\n      this.renderBasicConnections(\n        sourceNodes,\n        destinationNodes,\n        svgElements,\n        hasBranchLabels,\n      );\n    } else {\n      this.renderSkippingConnections(\n        sourceNodes,\n        destinationNodes,\n        skippedNodes,\n        svgElements,\n        hasBranchLabels,\n      );\n    }\n  }\n\n  /**\n   * Connections between adjacent columns without any skipping.\n   *\n   * Adds all the SVG components to the elements list.\n   */\n  private renderBasicConnections(\n    sourceNodes: Array<NodeInfo>,\n    destinationNodes: Array<NodeInfo>,\n    svgElements: SVGChildren,\n    hasBranchLabels: boolean,\n  ) {\n    const { connectorStrokeWidth, nodeSpacingH } = this.props.layout;\n    const halfSpacingH = nodeSpacingH / 2;\n\n    // Stroke props common to straight / curved connections\n    const connectorStroke = {\n      className: \"PWGx-pipeline-connector\",\n      strokeWidth: connectorStrokeWidth,\n    };\n\n    this.renderHorizontalConnection(\n      sourceNodes[0],\n      destinationNodes[0],\n      connectorStroke,\n      svgElements,\n    );\n\n    if (sourceNodes.length === 1 && destinationNodes.length === 1) {\n      return; // No curves needed.\n    }\n\n    // Work out the extents of source and dest space\n    let rightmostSource = sourceNodes[0].x;\n    let leftmostDestination = destinationNodes[0].x;\n\n    for (let i = 1; i < sourceNodes.length; i++) {\n      rightmostSource = Math.max(rightmostSource, sourceNodes[i].x);\n    }\n\n    for (let i = 1; i < destinationNodes.length; i++) {\n      leftmostDestination = Math.min(\n        leftmostDestination,\n        destinationNodes[i].x,\n      );\n    }\n\n    // Collapse from previous node(s) to top column node\n    const collapseMidPointX = Math.round(rightmostSource + halfSpacingH);\n    for (const previousNode of sourceNodes.slice(1)) {\n      this.renderBasicCurvedConnection(\n        previousNode,\n        destinationNodes[0],\n        collapseMidPointX,\n        svgElements,\n      );\n    }\n\n    // Expand from top previous node to column node(s)\n    let expandMidPointX = Math.round(leftmostDestination - halfSpacingH);\n\n    if (hasBranchLabels) {\n      // Shift curve midpoint so that there's room for the labels\n      expandMidPointX -= sequentialStagesLabelOffset;\n    }\n\n    for (const destNode of destinationNodes.slice(1)) {\n      this.renderBasicCurvedConnection(\n        sourceNodes[0],\n        destNode,\n        expandMidPointX,\n        svgElements,\n      );\n    }\n  }\n\n  /**\n   * Renders a more complex connection, that \"skips\" one or more nodes\n   *\n   * Adds all the SVG components to the elements list.\n   */\n  private renderSkippingConnections(\n    sourceNodes: Array<NodeInfo>,\n    destinationNodes: Array<NodeInfo>,\n    skippedNodes: Array<NodeInfo>,\n    svgElements: SVGChildren,\n    hasBranchLabels: boolean,\n  ) {\n    const {\n      connectorStrokeWidth,\n      nodeRadius,\n      terminalRadius,\n      curveRadius,\n      nodeSpacingV,\n      nodeSpacingH,\n    } = this.props.layout;\n\n    const halfSpacingH = nodeSpacingH / 2;\n\n    // Stroke props common to straight / curved connections\n    const connectorStroke = {\n      className: \"PWGx-pipeline-connector\",\n      strokeWidth: connectorStrokeWidth,\n    };\n\n    const skipConnectorStroke = {\n      className: \"PWGx-pipeline-connector-skipped\",\n      strokeWidth: connectorStrokeWidth,\n    };\n\n    const lastSkippedNode = skippedNodes[skippedNodes.length - 1];\n    let leftNode, rightNode;\n\n    //--------------------------------------------------------------------------\n    //  Draw the \"ghost\" connections to/from/between skipped nodes\n\n    leftNode = sourceNodes[0];\n    for (rightNode of skippedNodes) {\n      this.renderHorizontalConnection(\n        leftNode,\n        rightNode,\n        skipConnectorStroke,\n        svgElements,\n      );\n      leftNode = rightNode;\n    }\n    this.renderHorizontalConnection(\n      leftNode,\n      destinationNodes[0],\n      skipConnectorStroke,\n      svgElements,\n    );\n\n    //--------------------------------------------------------------------------\n    //  Work out the extents of source and dest space\n\n    let rightmostSource = sourceNodes[0].x;\n    let leftmostDestination = destinationNodes[0].x;\n\n    for (let i = 1; i < sourceNodes.length; i++) {\n      rightmostSource = Math.max(rightmostSource, sourceNodes[i].x);\n    }\n\n    for (let i = 1; i < destinationNodes.length; i++) {\n      leftmostDestination = Math.min(\n        leftmostDestination,\n        destinationNodes[i].x,\n      );\n    }\n\n    //--------------------------------------------------------------------------\n    //  \"Collapse\" from the source node(s) down toward the first skipped\n\n    leftNode = sourceNodes[0];\n    rightNode = skippedNodes[0];\n\n    for (leftNode of sourceNodes.slice(1)) {\n      const midPointX = Math.round(rightmostSource + halfSpacingH);\n      const leftNodeRadius = leftNode.isPlaceholder\n        ? terminalRadius\n        : nodeRadius;\n      const key = connectorKey(leftNode, rightNode);\n\n      const x1 = leftNode.x + leftNodeRadius - nodeStrokeWidth / 2;\n      const y1 = leftNode.y;\n      const x2 = midPointX;\n      const y2 = rightNode.y;\n\n      const pathData =\n        `M ${x1} ${y1}` +\n        this.svgBranchCurve(x1, y1, x2, y2, midPointX, curveRadius);\n\n      svgElements.push(\n        <path {...connectorStroke} key={key} d={pathData} fill=\"none\" />,\n      );\n    }\n\n    //--------------------------------------------------------------------------\n    //  \"Expand\" from the last skipped node toward the destination nodes\n\n    leftNode = lastSkippedNode;\n\n    let expandMidPointX = Math.round(leftmostDestination - halfSpacingH);\n\n    if (hasBranchLabels) {\n      // Shift curve midpoint so that there's room for the labels\n      expandMidPointX -= sequentialStagesLabelOffset;\n    }\n\n    for (rightNode of destinationNodes.slice(1)) {\n      const rightNodeRadius = rightNode.isPlaceholder\n        ? terminalRadius\n        : nodeRadius;\n      const key = connectorKey(leftNode, rightNode);\n\n      const x1 = expandMidPointX;\n      const y1 = leftNode.y;\n      const x2 = rightNode.x - rightNodeRadius + nodeStrokeWidth / 2;\n      const y2 = rightNode.y;\n\n      const pathData =\n        `M ${x1} ${y1}` +\n        this.svgBranchCurve(x1, y1, x2, y2, expandMidPointX, curveRadius);\n\n      svgElements.push(\n        <path {...connectorStroke} key={key} d={pathData} fill=\"none\" />,\n      );\n    }\n\n    //--------------------------------------------------------------------------\n    //  \"Main\" curve from top of source nodes, around skipped nodes, to top of dest nodes\n\n    leftNode = sourceNodes[0];\n    rightNode = destinationNodes[0];\n\n    const leftNodeRadius = leftNode.isPlaceholder ? terminalRadius : nodeRadius;\n    const rightNodeRadius = rightNode.isPlaceholder\n      ? terminalRadius\n      : nodeRadius;\n    const key = connectorKey(leftNode, rightNode);\n\n    const skipHeight = nodeSpacingV * 0.5;\n    const controlOffsetUpper = curveRadius * 1.54;\n    const controlOffsetLower = skipHeight * 0.257;\n    const controlOffsetMid = skipHeight * 0.2;\n    const inflectiontOffset = Math.round(skipHeight * 0.7071); // cos(45º)-ish\n\n    // Start point\n    const p1x = leftNode.x + leftNodeRadius - nodeStrokeWidth / 2;\n    const p1y = leftNode.y;\n\n    // Begin curve down point\n    const p2x = Math.round(skippedNodes[0].x - halfSpacingH);\n    const p2y = p1y;\n    const c1x = p2x + controlOffsetUpper;\n    const c1y = p2y;\n\n    // End curve down point\n    const p4x = skippedNodes[0].x;\n    const p4y = p1y + skipHeight;\n    const c4x = p4x - controlOffsetLower;\n    const c4y = p4y;\n\n    // Curve down midpoint / inflection\n    const p3x = skippedNodes[0].x - inflectiontOffset;\n    const p3y = skippedNodes[0].y + inflectiontOffset;\n    const c2x = p3x - controlOffsetMid;\n    const c2y = p3y - controlOffsetMid;\n    const c3x = p3x + controlOffsetMid;\n    const c3y = p3y + controlOffsetMid;\n\n    // Begin curve up point\n    const p5x = lastSkippedNode.x;\n    const p5y = p4y;\n    const c5x = p5x + controlOffsetLower;\n    const c5y = p5y;\n\n    // End curve up point\n    const p7x = Math.round(lastSkippedNode.x + halfSpacingH);\n    const p7y = rightNode.y;\n    const c8x = p7x - controlOffsetUpper;\n    const c8y = p7y;\n\n    // Curve up midpoint / inflection\n    const p6x = lastSkippedNode.x + inflectiontOffset;\n    const p6y = lastSkippedNode.y + inflectiontOffset;\n    const c6x = p6x - controlOffsetMid;\n    const c6y = p6y + controlOffsetMid;\n    const c7x = p6x + controlOffsetMid;\n    const c7y = p6y - controlOffsetMid;\n\n    // End point\n    const p8x = rightNode.x - rightNodeRadius + nodeStrokeWidth / 2;\n    const p8y = rightNode.y;\n\n    const pathData =\n      `M ${p1x} ${p1y}` +\n      `L ${p2x} ${p2y}` + // 1st horizontal\n      `C ${c1x} ${c1y} ${c2x} ${c2y} ${p3x} ${p3y}` + // Curve down (upper)\n      `C ${c3x} ${c3y} ${c4x} ${c4y} ${p4x} ${p4y}` + // Curve down (lower)\n      `L ${p5x} ${p5y}` + // 2nd horizontal\n      `C ${c5x} ${c5y} ${c6x} ${c6y} ${p6x} ${p6y}` + // Curve up (lower)\n      `C ${c7x} ${c7y} ${c8x} ${c8y} ${p7x} ${p7y}` + // Curve up (upper)\n      `L ${p8x} ${p8y}` + // Last horizontal\n      \"\";\n\n    svgElements.push(\n      <path {...connectorStroke} key={key} d={pathData} fill=\"none\" />,\n    );\n  }\n\n  /**\n   * Simple straight connection.\n   *\n   * Adds all the SVG components to the elements list.\n   */\n  private renderHorizontalConnection(\n    leftNode: NodeInfo,\n    rightNode: NodeInfo,\n    connectorStroke: Object,\n    svgElements: SVGChildren,\n  ) {\n    const { nodeRadius, terminalRadius } = this.props.layout;\n    const leftNodeRadius = leftNode.isPlaceholder ? terminalRadius : nodeRadius;\n    const rightNodeRadius = rightNode.isPlaceholder\n      ? terminalRadius\n      : nodeRadius;\n\n    const key = connectorKey(leftNode, rightNode);\n\n    const x1 = leftNode.x + leftNodeRadius - nodeStrokeWidth / 2;\n    const x2 = rightNode.x - rightNodeRadius + nodeStrokeWidth / 2;\n    const y = leftNode.y;\n\n    svgElements.push(\n      <line {...connectorStroke} key={key} x1={x1} y1={y} x2={x2} y2={y} />,\n    );\n  }\n\n  /**\n   * A direct curve between two nodes in adjacent columns.\n   *\n   * Adds all the SVG components to the elements list.\n   */\n  private renderBasicCurvedConnection(\n    leftNode: NodeInfo,\n    rightNode: NodeInfo,\n    midPointX: number,\n    svgElements: SVGChildren,\n  ) {\n    const { nodeRadius, terminalRadius, curveRadius, connectorStrokeWidth } =\n      this.props.layout;\n    const leftNodeRadius = leftNode.isPlaceholder ? terminalRadius : nodeRadius;\n    const rightNodeRadius = rightNode.isPlaceholder\n      ? terminalRadius\n      : nodeRadius;\n\n    const key = connectorKey(leftNode, rightNode);\n\n    const leftPos = {\n      x: leftNode.x + leftNodeRadius - nodeStrokeWidth / 2,\n      y: leftNode.y,\n    };\n\n    const rightPos = {\n      x: rightNode.x - rightNodeRadius + nodeStrokeWidth / 2,\n      y: rightNode.y,\n    };\n\n    // Stroke props common to straight / curved connections\n    const connectorStroke = {\n      className: \"PWGx-pipeline-connector\",\n      strokeWidth: connectorStrokeWidth,\n    };\n\n    const pathData =\n      `M ${leftPos.x} ${leftPos.y}` +\n      this.svgBranchCurve(\n        leftPos.x,\n        leftPos.y,\n        rightPos.x,\n        rightPos.y,\n        midPointX,\n        curveRadius,\n      );\n\n    svgElements.push(\n      <path {...connectorStroke} key={key} d={pathData} fill=\"none\" />,\n    );\n  }\n\n  /**\n   * Generates an SVG path string for the \"vertical\" S curve used to connect nodes in adjacent columns.\n   */\n  private svgBranchCurve(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number,\n    midPointX: number,\n    curveRadius: number,\n  ) {\n    const verticalDirection = Math.sign(y2 - y1); // 1 == curve down, -1 == curve up\n    const w1 = midPointX - curveRadius - x1 + curveRadius * verticalDirection;\n    const w2 = x2 - curveRadius - midPointX - curveRadius * verticalDirection;\n    const v = y2 - y1 - 2 * curveRadius * verticalDirection; // Will be -ive if curve up\n    const cv = verticalDirection * curveRadius;\n\n    return (\n      ` l ${w1} 0` + // first horizontal line\n      ` c ${curveRadius} 0 ${curveRadius} ${cv} ${curveRadius} ${cv}` + // turn\n      ` l 0 ${v}` + // vertical line\n      ` c 0 ${cv} ${curveRadius} ${cv} ${curveRadius} ${cv}` + // turn again\n      ` l ${w2} 0` // second horizontal line\n    );\n  }\n\n  render() {\n    const { connections } = this.props;\n\n    const svgElements: SVGChildren = []; // Buffer for children of the SVG\n\n    connections.forEach((connection) => {\n      this.renderCompositeConnection(connection, svgElements);\n    });\n\n    return <>{svgElements}</>;\n  }\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.pgv-status-icon *{transition:var(--elastic-transition);transform-origin:center}.pgv-status-icon .pgv-scale{animation:pulseScale 2s both ease-in-out infinite;opacity:.25}@keyframes pulseScale{50%{scale:2.25;opacity:1}}.jenkins-\\\\!-skipped-color{--color: var(--text-color-secondary)}`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/main/frontend/common/components/status-icon.scss\"],\"names\":[],\"mappings\":\"AACE,mBACE,oCAAA,CACA,uBAAA,CAGF,4BACE,iDAAA,CACA,WAAA,CAEA,sBACE,IACE,UAAA,CACA,SAAA,CAAA,CAOR,0BACE,oCAAA\",\"sourcesContent\":[\".pgv-status-icon {\\n  * {\\n    transition: var(--elastic-transition);\\n    transform-origin: center;\\n  }\\n\\n  .pgv-scale {\\n    animation: pulseScale 2s both ease-in-out infinite;\\n    opacity: 0.25;\\n\\n    @keyframes pulseScale {\\n      50% {\\n        scale: 2.25;\\n        opacity: 1;\\n      }\\n    }\\n  }\\n}\\n\\n// TODO - can be removed when Jenkins >= 2.506\\n.jenkins-\\\\!-skipped-color {\\n  --color: var(--text-color-secondary);\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n"],"names":["options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","locals","StatusIcon","_ref","status","percentage","skeleton","strokeWidth","radius","circumference","Math","PI","offset","React","viewBox","concat","className","resultToColor","opacity","cx","viewBoxSize","cy","r","fill","style","transition","stroke","strokeOpacity","strokeLinecap","strokeDasharray","strokeDashoffset","transform","transformOrigin","Group","currentStatus","Result","running","success","d","strokeLinejoin","failure","aborted","unstable","rx","ry","skipped","paused","strokeMiterlimit","not_built","unknown","_ref2","children","result","ONE_SECOND_MS","ONE_MINUTE_MS","ONE_HOUR_MS","ONE_DAY_MS","ONE_MONTH_MS","ONE_YEAR_MS","makeTimeSpanString","bigUnit","bigLabel","smallUnit","smallLabel","getTimeSpanString","duration","years","floor","months","days","hours","minutes","seconds","millis","total","ms","since","started","abs","Date","now","___CSS_LOADER_EXPORT___","push","module","id"],"sourceRoot":""}