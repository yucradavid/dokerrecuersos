{"version":3,"file":"280.pipeline-console-view-bundle.js","mappings":"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","sources":["webpack://pipeline-graph-view-plugin/./src/main/frontend/pipeline-console-view/pipeline-console/main/Ansi.tsx","webpack://pipeline-graph-view-plugin/./src/main/frontend/pipeline-console-view/pipeline-console/main/ConsoleLine.tsx","webpack://pipeline-graph-view-plugin/./src/main/frontend/pipeline-console-view/pipeline-console/main/ConsoleLogStream.tsx","webpack://pipeline-graph-view-plugin/./src/main/frontend/pipeline-console-view/pipeline-console/main/CloseIcon.tsx","webpack://pipeline-graph-view-plugin/./src/main/frontend/pipeline-console-view/pipeline-console/main/ConsoleLogModal.tsx","webpack://pipeline-graph-view-plugin/./src/main/frontend/pipeline-console-view/pipeline-console/main/ResizeIcon.tsx","webpack://pipeline-graph-view-plugin/./src/main/frontend/pipeline-console-view/pipeline-console/main/ConsoleLogCard.tsx","webpack://pipeline-graph-view-plugin/./src/main/frontend/pipeline-console-view/pipeline-console/main/StageNodeLink.tsx","webpack://pipeline-graph-view-plugin/./src/main/frontend/pipeline-console-view/pipeline-console/main/StageView.tsx"],"sourcesContent":["import React from \"react\";\n\nexport interface Result {\n  isSelectGraphicRendition?: boolean;\n  escapeCode?: string; // input\n  setFG?: number | false; // 0-7 if a foreground color is specified\n  setBG?: number | false; // 0-7 if a background color is specified\n  resetFG?: boolean; // true if contains a reset back to default foreground\n  resetBG?: boolean; // true if contains a reset back to default background\n}\n\n/**\n * Parse an isolated escape code, looking for \"SelectGraphicsRendition\" codes specifically.\n *\n * Result:\n * ```\n * // Supported code\n * {\n *     isSelectGraphicRendition: true,\n *     escapeCode: string, // input\n *     setFG: integer | false, // 0-7 if a foreground color is specified\n *     setBG: integer | false, // 0-7 if a background color is specified\n *     resetFG: bool, // true if contains a reset back to default foreground\n *     resetBG: bool // true if contains a reset back to default background\n * }\n *\n * // Unsupported or malformed code:\n * {\n *     isSelectGraphicRendition: false,\n *     escapeCode: string // input\n * }\n * ```\n */\nexport function parseEscapeCode(escapeCode: string): Result {\n  const graphicsPattern = /^\\u001b\\[([;0-9]*)m$/; // We only care about SGR codes\n\n  const result: Result = {\n    isSelectGraphicRendition: false, // True when is a color / font command\n    escapeCode,\n  };\n\n  const match = graphicsPattern.exec(escapeCode);\n\n  if (match) {\n    result.isSelectGraphicRendition = true;\n    result.setFG = false;\n    result.setBG = false;\n    result.resetFG = false;\n    result.resetBG = false;\n\n    // Convert param string to array<int> with length > 1\n    const params = (match[1] || \"\")\n      .split(\";\")\n      .map((str) => parseInt(str || \"0\"));\n\n    // Now go through the ints, decode them into bg/fg info\n    for (const num of params) {\n      if (num >= 30 && num <= 37) {\n        result.setFG = num - 30; // Normal FG set\n      } else if (num >= 40 && num <= 47) {\n        result.setBG = num - 40; // Normal BG set\n      } else {\n        if (num === 38 || num === 0) {\n          result.resetFG = true;\n          result.setFG = false;\n        }\n\n        if (num === 48 || num === 0) {\n          result.resetBG = true;\n          result.setBG = false;\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n * Break up a string into an array of plain strings and escape codes. Returns [input] if no codes present.\n */\nexport function tokenizeANSIString(input?: string): string[] | Result[] {\n  if (typeof input !== \"string\") {\n    return [];\n  }\n\n  const len = input.length;\n\n  if (len === 0) {\n    return [];\n  }\n\n  /*\n    loopCounter         - Where should the next loop start looping for escape codes.\n    escapeCodeIndex     - The index in the string of the next ANSI escape code or -1.\n    parsedPointer       - The parse pointer how far in the string have we parsed.\n                          This will === loopCounter unless there are commented ANSI escape characters.\n    commentStartIndex   - The start index of the next comment block, or -1.\n    commentEndIndex     - The end index of the next comment block, or -1.\n  */\n  let loopCounter = 0,\n    escapeCodeIndex = 0,\n    parsedPointer = 0,\n    // comment start\n    commentStartIndex = 0,\n    // comment end\n    commentEndIndex = 0;\n  const result: string[] | Result[] = [];\n\n  while (loopCounter < len) {\n    //--------------------------------------------------------------------------\n    //  Find next escape code\n    escapeCodeIndex = input.indexOf(\"\\x1b\", loopCounter);\n\n    if (escapeCodeIndex === -1) {\n      // No more escape codes\n      break;\n    }\n\n    // Check if escape code is commented\n    commentStartIndex = input.indexOf(\"<!--\", loopCounter);\n    commentEndIndex = input.indexOf(\"-->\", commentStartIndex);\n    if (commentEndIndex !== -1) {\n      commentEndIndex += 3;\n    }\n    if (\n      escapeCodeIndex > commentStartIndex &&\n      escapeCodeIndex < commentEndIndex\n    ) {\n      // Skip past the comment\n      loopCounter = commentEndIndex;\n      continue;\n    }\n\n    //--------------------------------------------------------------------------\n    //  Capture any text between the start pointer and the escape code\n\n    if (escapeCodeIndex > loopCounter) {\n      result.push(input.substring(loopCounter, escapeCodeIndex));\n      loopCounter = escapeCodeIndex; // Advance our start pointer to the beginning of the escape code\n    }\n\n    //--------------------------------------------------------------------------\n    //  Find the end of the escape code (a char from 64 - 126 indicating command)\n\n    escapeCodeIndex += 2; // Skip past ESC and '['\n\n    let code = input.charCodeAt(escapeCodeIndex);\n    while (escapeCodeIndex < len && (code < 64 || code > 126)) {\n      escapeCodeIndex++;\n      code = input.charCodeAt(escapeCodeIndex);\n    }\n\n    //--------------------------------------------------------------------------\n    //  Create token for the escape code\n\n    // TODO fix type checking\n    const parsedEscapeCode: any = parseEscapeCode(\n      input.substring(loopCounter, escapeCodeIndex + 1),\n    );\n    result.push(parsedEscapeCode);\n\n    //--------------------------------------------------------------------------\n    //  Keep looking in the rest of the string\n\n    loopCounter = escapeCodeIndex + 1;\n    // Move parsedPointer as we have processes the text to this point.\n    parsedPointer = loopCounter;\n  }\n\n  if (parsedPointer < len) {\n    result.push(input.substr(parsedPointer));\n  }\n\n  return result;\n}\n\n/**\n * Takes an array of string snippets and parsed escape codes produced bv tokenizeANSIString, and creates\n * an array of strings and spans with classNames for attributes.\n */\nexport function makeReactChildren(\n  tokenizedInput: string[] | Result[],\n  key: string,\n) {\n  const result = [];\n  let currentState: Result = {\n    setFG: false,\n    setBG: false,\n  };\n\n  for (let i = 0; i < tokenizedInput.length; i++) {\n    let codeOrString = tokenizedInput[i];\n    if (typeof codeOrString === \"string\") {\n      // Need to output a <span> or plain text if there's no interesting current state\n      if (!currentState.setFG && !currentState.setBG) {\n        result.push(\n          <div\n            dangerouslySetInnerHTML={{ __html: codeOrString }}\n            key={`${key}-${i}`}\n          />,\n        );\n      } else {\n        const classNames = [];\n\n        if (typeof currentState.setFG === \"number\") {\n          classNames.push(`ansi-fg-${currentState.setFG}`);\n        }\n        if (typeof currentState.setBG === \"number\") {\n          classNames.push(`ansi-bg-${currentState.setBG}`);\n        }\n\n        result.push(\n          <span className={classNames.join(\" \")}>{codeOrString}</span>,\n        );\n      }\n    } else if (codeOrString.isSelectGraphicRendition) {\n      // Update the current FG / BG colors for the next text span\n      const nextState = { ...currentState };\n\n      if (codeOrString.resetFG) {\n        nextState.setFG = false;\n      }\n      if (codeOrString.resetBG) {\n        nextState.setBG = false;\n      }\n\n      if (typeof codeOrString.setFG === \"number\") {\n        nextState.setFG = codeOrString.setFG;\n      }\n      if (typeof codeOrString.setBG === \"number\") {\n        nextState.setBG = codeOrString.setBG;\n      }\n\n      currentState = nextState;\n    }\n  }\n\n  return result;\n}\n","import React from \"react\";\nimport { useEffect, useRef } from \"react\";\nimport { makeReactChildren, tokenizeANSIString } from \"./Ansi\";\n\nexport interface ConsoleLineProps {\n  lineNumber: string;\n  content: string;\n  stepId: string;\n  startByte: number;\n  heightCallback: (height: number) => void;\n}\n\ndeclare global {\n  interface Window {\n    Behaviour: any;\n  }\n}\n\n// Console output line\nexport const ConsoleLine = (props: ConsoleLineProps) => {\n  const ref = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    const height = ref.current ? ref.current.getBoundingClientRect().height : 0;\n    props.heightCallback(height);\n\n    // apply any behaviour selectors to the new content, e.g. for input step\n    window.Behaviour.applySubtree(\n      document.getElementById(`${props.stepId}-${props.lineNumber}`),\n    );\n  }, []);\n\n  return (\n    <pre\n      className=\"console-output-line\"\n      key={`console-line-pre${props.lineNumber}`}\n    >\n      <div\n        className=\"console-output-line-anchor\"\n        id={`log-${props.lineNumber}`}\n        key={`${props.lineNumber}-anchor`}\n      />\n      <div\n        className=\"console-output-line\"\n        key={`${props.lineNumber}-body`}\n        ref={ref}\n      >\n        <a\n          className=\"console-line-number\"\n          href={`?start-byte=${props.startByte}&selected-node=${props.stepId}#log-${props.lineNumber}`} //`}\n        >\n          {props.lineNumber}\n        </a>\n        <div\n          id={`${props.stepId}-${props.lineNumber}`}\n          className=\"console-text\"\n        >\n          {makeReactChildren(\n            tokenizeANSIString(props.content),\n            `${props.stepId}-${props.lineNumber}`,\n          )}\n        </div>\n      </div>\n    </pre>\n  );\n};\n","import React from \"react\";\nimport { Virtuoso, VirtuosoHandle, LogLevel } from \"react-virtuoso\";\nimport { useCallback, useState, useEffect, useRef } from \"react\";\nimport { Result, StepInfo, StepLogBufferInfo } from \"./PipelineConsoleModel\";\n\nimport Button from \"@mui/material/Button\";\n\nexport interface ConsoleLogStreamProps {\n  logBuffer: StepLogBufferInfo;\n  handleMoreConsoleClick: (nodeId: string, startByte: number) => void;\n  step: StepInfo;\n  maxHeightScale: number;\n}\n\nimport { ConsoleLine } from \"./ConsoleLine\";\n\nexport default function ConsoleLogStream(props: ConsoleLogStreamProps) {\n  const appendInterval = useRef<NodeJS.Timeout | null>(null);\n  const virtuosoRef = useRef<VirtuosoHandle>(null);\n  const [stickToBottom, setStickToBottom] = useState(false);\n  const [moveToBottom, setMoveToBottom] = useState(true);\n  const showButtonInterval = useRef<NodeJS.Timeout | null>(null);\n  const [showButton, setShowButton] = useState(false);\n  const [maxConsoleLineHeight, setMaxConsoleLineHeight] = useState(1);\n\n  useEffect(() => {\n    return () => {\n      if (appendInterval.current) {\n        clearInterval(appendInterval.current);\n      }\n      if (showButtonInterval.current) {\n        clearTimeout(showButtonInterval.current);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (showButtonInterval.current) {\n      clearTimeout(showButtonInterval.current);\n    }\n    if (!stickToBottom) {\n      showButtonInterval.current = setTimeout(() => setShowButton(true), 500);\n    } else {\n      setShowButton(false);\n    }\n  }, [stickToBottom, setShowButton]);\n\n  useEffect(() => {\n    if (moveToBottom) {\n      scrollListBottom();\n      setMoveToBottom(false);\n    }\n  }, [moveToBottom]);\n\n  const consoleLineHeightCallback = useCallback((height: number) => {\n    if (height > maxConsoleLineHeight) {\n      setMaxConsoleLineHeight(height);\n    } else if (maxConsoleLineHeight == 1) {\n      setMaxConsoleLineHeight(height);\n    }\n  }, []);\n\n  const scrollListBottom = () => {\n    if (virtuosoRef.current) {\n      if (props.logBuffer.lines) {\n        virtuosoRef.current?.scrollBy({\n          // This needs to be large enough to cover even really long lines.\n          // It doesn't need to worry about being too big.\n          top: props.logBuffer.lines.length * 1000,\n        });\n      } else {\n        console.debug(\"'logBuffer.lines' not set. Log empty, not scrolling.\");\n      }\n    } else {\n      console.warn(\"virtuosoRef is null, cannot scroll to index!\");\n    }\n  };\n\n  const shouldRequestMoreLogs = () => {\n    return props.step.state === Result.running || props.logBuffer.startByte < 0;\n  };\n\n  const height = () => {\n    const spinnerLines = shouldRequestMoreLogs() ? 2 : 0;\n    return (props.logBuffer.lines.length + spinnerLines) * maxConsoleLineHeight;\n  };\n\n  return (\n    <>\n      <Virtuoso\n        style={{\n          height: `${height()}px`,\n          maxHeight: window.innerHeight * props.maxHeightScale,\n        }}\n        ref={virtuosoRef}\n        data={props.logBuffer.lines}\n        components={{\n          Footer: () => {\n            return shouldRequestMoreLogs() ? (\n              <div className=\"lds-ellipsis\">\n                <div></div>\n                <div></div>\n                <div></div>\n              </div>\n            ) : (\n              <></>\n            );\n          },\n        }}\n        itemContent={(index: number, content: string) => {\n          return (\n            <ConsoleLine\n              lineNumber={String(index)}\n              content={content}\n              stepId={props.step.id}\n              startByte={props.logBuffer.startByte}\n              heightCallback={consoleLineHeightCallback}\n            />\n          );\n        }}\n        atBottomStateChange={(bottom) => {\n          if (appendInterval.current) {\n            clearInterval(appendInterval.current);\n          }\n          console.debug(`'atBottomStateChange' called with '${bottom}'`);\n          if (bottom && shouldRequestMoreLogs()) {\n            console.debug(`Fetching more log text`);\n            appendInterval.current = setInterval(() => {\n              props.handleMoreConsoleClick(\n                props.step.id,\n                props.logBuffer.startByte,\n              );\n            }, 1000);\n            console.debug(`Received more text '${bottom} - ${stickToBottom}'`);\n          }\n          console.debug(`Setting stickToBottom to '${bottom}'`);\n          setStickToBottom(bottom);\n        }}\n        followOutput={(bottom) => {\n          // This is a workaround as 'followOutput' isn't working for me - works in sandbox, but not nested inside Jenkins UI.\n          setMoveToBottom(bottom);\n          return false;\n        }}\n        // Uncomment to help with debugging virtuoso issues.\n        //logLevel={LogLevel.DEBUG}\n      />\n      {showButton && (\n        <Button\n          variant=\"text\"\n          sx={{ padding: \"0px\", textTransform: \"none\" }}\n          onClick={() => scrollListBottom()}\n          style={{ float: \"right\", transform: \"translate(-2rem, -2rem)\" }}\n        >\n          Scroll to Bottom\n        </Button>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\n\nexport type CloseIconProps = {\n  onClick: () => void;\n};\n\nexport default function CloseIcon(props: CloseIconProps) {\n  return (\n    <>\n      <button\n        onClick={props.onClick}\n        className=\"jenkins-dialog__close-button jenkins-button\"\n      >\n        <span className=\"jenkins-visually-hidden\">Close</span>\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className=\"ionicon\"\n          viewBox=\"0 0 512 512\"\n        >\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"32\"\n            d=\"M368 368L144 144M368 144L144 368\"\n          ></path>\n        </svg>\n      </button>\n    </>\n  );\n}\n","import React from \"react\";\nimport { StepInfo, StepLogBufferInfo } from \"./PipelineConsoleModel\";\nimport CloseIcon from \"./CloseIcon\";\n\nexport interface ConsoleLogModelProps {\n  logBuffer: StepLogBufferInfo;\n  handleMoreConsoleClick: (nodeId: string, startByte: number) => void;\n  step: StepInfo;\n  truncatedLogWarning: React.JSX.Element | undefined;\n  maxHeightScale: number;\n  setClose: () => void;\n  open: boolean;\n}\n\nimport { Box, Modal, Stack } from \"@mui/material\";\nimport Typography from \"@mui/material/Typography\";\nimport ConsoleLogStream from \"./ConsoleLogStream\";\nimport StatusIcon from \"../../../common/components/status-icon\";\n\nconst style = {\n  top: \"50%\",\n  left: \"50%\",\n  width: \"98%\",\n  height: \"95%\",\n  margin: \"1%\",\n  bgcolor: \"var(--pre-background)\",\n  color: \"var(--pre-color)\",\n  backdropFilter: \"var(--dialog-backdrop-filter)\",\n  border: \"none\",\n  backgroundColor: \"var(--background)\",\n  borderRadius: \"0.6rem\",\n  boxShadow: \"var(--dialog-box-shadow)\",\n  overflowY: \"auto\",\n  p: 4,\n};\n\nexport default function ConsoleLogModal(props: ConsoleLogModelProps) {\n  const handleClose = () => props.setClose();\n  const stepDisplayName = props.step.name;\n  const stepTitle = props.step.title ? \" - \" + props.step.title : \"\";\n\n  return (\n    <>\n      <Modal\n        open={props.open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={style}>\n          <Typography\n            id=\"modal-modal-title\"\n            variant=\"h6\"\n            component=\"h2\"\n            className=\"log-card--header\"\n            noWrap={true}\n            key={`step-name-text-${props.step.id}`}\n          >\n            <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n              <span className=\"pgv-step-header__icon\">\n                <StatusIcon\n                  status={props.step.state}\n                  percentage={props.step.completePercent}\n                />\n              </span>\n              <Box component=\"span\">\n                <Box component=\"span\" fontWeight=\"bold\">\n                  {stepDisplayName}\n                </Box>\n                {stepTitle}\n              </Box>\n            </Stack>\n          </Typography>\n          <CloseIcon onClick={handleClose} />\n          <div>{props.truncatedLogWarning}</div>\n          <ConsoleLogStream {...props} />\n        </Box>\n      </Modal>\n    </>\n  );\n}\n","import React from \"react\";\n\nexport default function ResizeIcon() {\n  return (\n    <svg\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M10 4H15C15.5523 4 16 4.44772 16 5V10M10 16H5C4.44772 16 4 15.5523 4 15V10\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n      />\n    </svg>\n  );\n}\n","import React from \"react\";\nimport { lazy, Suspense } from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport {\n  Button,\n  Card,\n  CardContent,\n  CircularProgress,\n  Collapse,\n  Grid,\n  Typography,\n} from \"@mui/material\";\nimport CardActionArea from \"@mui/material/CardActions\";\nimport IconButton, { IconButtonProps } from \"@mui/material/IconButton\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport LinkIcon from \"@mui/icons-material/Link\";\nimport { Tooltip } from \"react-tippy\";\n\nimport {\n  LOG_FETCH_SIZE,\n  StepInfo,\n  StepLogBufferInfo,\n} from \"./PipelineConsoleModel\";\nimport ConsoleLogModal from \"./ConsoleLogModal\";\nimport ResizeIcon from \"./ResizeIcon\";\nimport { total } from \"../../../common/utils/timings\";\nimport StatusIcon from \"../../../common/components/status-icon\";\n\nconst ConsoleLogStream = lazy(() => import(\"./ConsoleLogStream\"));\n\ninterface ExpandMoreProps extends IconButtonProps {\n  expand: boolean;\n}\n\ndeclare module \"react-tippy\" {\n  export interface TooltipProps {\n    children?: React.ReactNode;\n  }\n}\n\nconst ExpandMore = styled((props: ExpandMoreProps) => {\n  const { expand, ...other } = props;\n  return <IconButton {...other} />;\n})(({ theme, expand }) => ({\n  transform: !expand ? \"rotate(0deg)\" : \"rotate(180deg)\",\n  marginLeft: \"auto\",\n  transition: theme.transitions.create(\"transform\", {\n    duration: theme.transitions.duration.shortest,\n  }),\n}));\n\nexport type ConsoleLogCardProps = {\n  step: StepInfo;\n  stepBuffer: StepLogBufferInfo;\n  isExpanded: boolean;\n  handleStepToggle: (event: React.SyntheticEvent<{}>, nodeId: string) => void;\n  handleMoreConsoleClick: (nodeId: string, startByte: number) => void;\n  // Id of the element whose scroll bar we wish to use.\n  scrollParentId: string;\n};\n\nexport type ConsoleLogCardState = {\n  open: boolean;\n};\n\nexport class ConsoleLogCard extends React.Component<\n  ConsoleLogCardProps,\n  ConsoleLogCardState\n> {\n  constructor(props: ConsoleLogCardProps) {\n    super(props);\n    this.handleStepToggle = this.handleStepToggle.bind(this);\n\n    this.state = {\n      open: false,\n    };\n  }\n\n  handleStepToggle(event: React.MouseEvent<HTMLElement>) {\n    this.props.handleStepToggle(event, this.props.step.id);\n  }\n\n  componentDidMount(): void {\n    if (this.props.isExpanded) {\n      // If we start expanded then request logs.\n      this.props.handleMoreConsoleClick(\n        this.props.step.id,\n        this.props.stepBuffer.startByte,\n      );\n    }\n  }\n\n  getTruncatedLogWarning() {\n    if (this.props.stepBuffer.lines && this.props.stepBuffer.startByte > 0) {\n      return (\n        <Grid container>\n          <Grid item xs={6} sm className=\"show-more-console\">\n            <Typography align=\"right\" className=\"step-header\">\n              {`Missing ${this.prettySizeString(\n                this.props.stepBuffer.startByte,\n              )} of logs.`}\n            </Typography>\n          </Grid>\n          <Grid item xs={6} sm className=\"show-more-console\">\n            <Button\n              variant=\"text\"\n              sx={{\n                padding: \"0px\",\n                textTransform: \"none\",\n                marginLeft: \"0.25rem\",\n              }}\n              onClick={() => {\n                let startByte =\n                  this.props.stepBuffer.startByte - LOG_FETCH_SIZE;\n                console.debug(\n                  `startByte '${this.props.stepBuffer.startByte}' -> '${startByte}'`,\n                );\n                if (startByte < 0) {\n                  startByte = 0;\n                }\n                this.props.handleMoreConsoleClick(\n                  this.props.step.id,\n                  startByte,\n                );\n              }}\n            >\n              Show more logs\n            </Button>\n          </Grid>\n        </Grid>\n      );\n    } else {\n      <div></div>;\n    }\n  }\n\n  prettySizeString(size: number) {\n    let kib = 1024;\n    let mib = 1024 * 1024;\n    let gib = 1024 * 1024 * 1024;\n    if (size < kib) {\n      return `${size}B`;\n    } else if (size < mib) {\n      return `${(size / kib).toFixed(2)}KiB`;\n    } else if (size < gib) {\n      return `${(size / mib).toFixed(2)}MiB`;\n    }\n    return `${(size / gib).toFixed(2)}GiB`;\n  }\n\n  getStepHeaderTitle(stepTitle: string, stepId: string) {\n    if (stepTitle) {\n      return (\n        <Typography\n          className=\"log-card--text\"\n          component=\"div\"\n          key={`step-duration-text-${stepId}`}\n        >\n          {stepTitle}\n        </Typography>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    const handleOpen = () => this.setState({ open: true });\n    const handleClose = () => this.setState({ open: false });\n\n    return (\n      <Card\n        className=\"step-detail-group\"\n        key={`step-card-${this.props.step.id}`}\n        style={{ marginBottom: \"5px\" }}\n      >\n        <CardActionArea\n          onClick={this.handleStepToggle}\n          aria-label=\"Show console log.\"\n          className={`step-header step-header-${this.props.step.state.toLowerCase()} step-detail-group-${\n            this.props.isExpanded ? \"expanded\" : \"collapsed\"\n          }`}\n          key={`step-action-area-${this.props.step.id}`}\n        >\n          <span className=\"pgv-step-header__icon\">\n            <StatusIcon\n              status={this.props.step.state}\n              percentage={this.props.step.completePercent}\n            />\n          </span>\n          <Grid\n            container\n            wrap=\"nowrap\"\n            columns={{ xs: 20 }}\n            key={`step-root-container-${this.props.step.id}`}\n          >\n            <Grid\n              item\n              container\n              xs={16}\n              sx={{ display: \"block\", margin: \"auto\" }}\n              width=\"80%\"\n            >\n              <Typography\n                className=\"log-card--header\"\n                noWrap={true}\n                component=\"div\"\n                key={`step-name-text-${this.props.step.id}`}\n                sx={{ flexGrow: 3 }}\n              >\n                {this.props.step.name}\n              </Typography>\n              {this.getStepHeaderTitle(\n                this.props.step.title,\n                this.props.step.id,\n              )}\n            </Grid>\n            <Grid\n              item\n              xs={2}\n              sx={{ margin: \"auto\", padding: \"0px\" }}\n              alignItems=\"center\"\n              justifyContent=\"center\"\n            >\n              <Typography\n                className=\"log-card--text log-card--text-duration\"\n                align=\"right\"\n                component=\"div\"\n                key={`step-duration-text-${this.props.step.id}`}\n              >\n                {total(this.props.step.totalDurationMillis)}\n              </Typography>\n            </Grid>\n\n            <Grid item xs={2} alignItems=\"center\" sx={{ margin: \"auto\" }}>\n              <Tooltip title=\"Open console log in full-screen mode\">\n                <IconButton\n                  aria-label={\"Open console log in full-screen mode\"}\n                  onClick={handleOpen}\n                >\n                  <div className=\"svg-icon--expand\">\n                    <ResizeIcon />\n                  </div>\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"View step as plain text\">\n                <IconButton\n                  onClick={() =>\n                    window.open(`log?nodeId=${this.props.step.id}`)\n                  }\n                  aria-label=\"View step as plain text\"\n                >\n                  <LinkIcon className=\"svg-icon--expand\" />\n                </IconButton>\n              </Tooltip>\n            </Grid>\n            <Grid item xs={1} alignItems=\"center\" sx={{ margin: \"auto\" }}>\n              <Tooltip title=\"Open console log\">\n                <ExpandMore\n                  expand={this.props.isExpanded}\n                  aria-label={\"Open console log\"}\n                  aria-expanded\n                  key={`step-expand-button-${this.props.step.id}`}\n                  sx={{ display: \"block\", marginLeft: \"auto\" }}\n                >\n                  <ExpandMoreIcon\n                    key={`step-expand-icon-${this.props.step.id}`}\n                    className=\"svg-icon svg-icon--expand\"\n                  />\n                </ExpandMore>\n              </Tooltip>\n            </Grid>\n          </Grid>\n        </CardActionArea>\n        <ConsoleLogModal\n          logBuffer={this.props.stepBuffer}\n          handleMoreConsoleClick={this.props.handleMoreConsoleClick}\n          step={this.props.step}\n          truncatedLogWarning={this.getTruncatedLogWarning()}\n          maxHeightScale={0.85}\n          open={this.state.open}\n          setClose={handleClose}\n        />\n        <Collapse\n          in={this.props.isExpanded}\n          timeout={50}\n          unmountOnExit\n          key={`step-colapsable-console-${this.props.step.id}`}\n        >\n          <CardContent\n            className=\"step-content\"\n            key={`step-console-content-${this.props.step.id}`}\n          >\n            <div>{this.getTruncatedLogWarning()}</div>\n            <Suspense fallback={<CircularProgress />}>\n              <ConsoleLogStream\n                logBuffer={this.props.stepBuffer}\n                handleMoreConsoleClick={this.props.handleMoreConsoleClick}\n                step={this.props.step}\n                maxHeightScale={0.65}\n              />\n            </Suspense>\n          </CardContent>\n        </Collapse>\n      </Card>\n    );\n  }\n}\n","import React from \"react\";\n\nexport interface StageNodeLinkProps {\n  agent: string;\n}\n\nfunction getAgentUrl(name: string) {\n  // Wrap built-in in brackets\n  const id = name == \"built-in\" ? \"(built-in)\" : name;\n  const rootPath = document.head.dataset.rooturl;\n  return `${rootPath}/computer/${id}/`;\n}\n\nconst StageNodeLink = ({ agent }: StageNodeLinkProps) => {\n  const agentName = agent == \"built-in\" ? \"Jenkins\" : agent;\n  const href = getAgentUrl(agent);\n  return (\n    <>\n      Running on <a href={href}>{agentName}</a>\n    </>\n  );\n};\n\nexport default StageNodeLink;\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\n\nimport HourglassEmptyIcon from \"@mui/icons-material/HourglassEmpty\";\nimport ScheduleIcon from \"@mui/icons-material/Schedule\";\nimport TimerIcon from \"@mui/icons-material/Timer\";\nimport InfoIcon from \"@mui/icons-material/Info\";\nimport LinkIcon from \"@mui/icons-material/Link\";\nimport ComputerIcon from \"@mui/icons-material/Computer\";\n\nimport {\n  StepInfo,\n  StageInfo,\n  StepLogBufferInfo,\n  LOG_FETCH_SIZE,\n} from \"./PipelineConsoleModel\";\nimport { ConsoleLogCard } from \"./ConsoleLogCard\";\nimport StageNodeLink from \"./StageNodeLink\";\nimport { paused, started, total } from \"../../../common/utils/timings\";\n\nexport interface StageSummaryProps {\n  stage: StageInfo;\n  failedSteps: StepInfo[];\n}\n\n// Tree Item for stages\nconst StageSummary = (props: StageSummaryProps) => (\n  <React.Fragment>\n    <div\n      className=\"stage-detail-group\"\n      key={`stage-detail-root-${props.stage.id}`}\n    >\n      <Typography\n        color=\"inherit\"\n        className=\"detail-element-header\"\n        key={`stage-detail-name-text-${props.stage.id}`}\n      >\n        Stage '{props.stage.name}'\n      </Typography>\n      <div\n        className=\"detail-element\"\n        key={`stage-detail-start-time-container-${props.stage.id}`}\n      >\n        {props.stage.startTimeMillis && (\n          <ScheduleIcon\n            className=\"detail-icon\"\n            key={`stage-detail-start-time-icon-${props.stage.id}`}\n          />\n        )}\n        {started(props.stage.startTimeMillis)}\n      </div>\n      <div\n        className=\"detail-element\"\n        key={`stage-detail-pause-duration-container-${props.stage.id}`}\n      >\n        <HourglassEmptyIcon\n          className=\"detail-icon\"\n          key={`stage-detail-pause-duration-icon-${props.stage.id}`}\n        />\n        {paused(props.stage.pauseDurationMillis)}\n      </div>\n      <div\n        className=\"detail-element\"\n        key={`stage-detail-duration-container-${props.stage.id}`}\n      >\n        <TimerIcon\n          className=\"detail-icon\"\n          key={`stage-detail-duration-icon-${props.stage.id}`}\n        />\n        {total(props.stage.totalDurationMillis)}\n      </div>\n      <div\n        className=\"detail-element\"\n        key={`stage-detail-status-container-${props.stage.id}`}\n      >\n        <InfoIcon\n          className=\"detail-icon\"\n          key={`stage-detail-status-icon-${props.stage.id}`}\n        />\n        <span\n          className=\"capitalize\"\n          key={`stage-detail-status-text-${props.stage.id}`}\n        >\n          {props.stage.state}\n        </span>\n      </div>\n      {props.stage.agent && (\n        <div\n          className=\"detail-element\"\n          key={`stage-detail-agent-container-${props.stage.id}`}\n        >\n          <ComputerIcon\n            className=\"detail-icon\"\n            key={`stage-detail-agent-icon-${props.stage.id}`}\n          />\n          <span key={`stage-detail-agent-text-${props.stage.id}`}>\n            <StageNodeLink agent={props.stage.agent} />\n          </span>\n        </div>\n      )}\n      {props.failedSteps.map((value: StepInfo) => {\n        console.debug(`Found failed step ${value}`);\n        return (\n          <FailedStepLink\n            step={value}\n            key={`stage-detail-failed-step-link-${props.stage.id}-${value.id}`}\n          />\n        );\n      })}\n      <div className=\"detail-element\">\n        <LinkIcon className=\"detail-icon\" />\n        <a className=\"detail-element\" href={`log?nodeId=${props.stage.id}`}>\n          View as plain text\n        </a>\n      </div>\n    </div>\n  </React.Fragment>\n);\n\nexport interface FailedStepLinkProps {\n  step: StepInfo;\n}\n\nconst FailedStepLink = (props: FailedStepLinkProps) => (\n  <div className=\"detail-element\">\n    <LinkIcon className=\"detail-icon\" />\n    <a className=\"detail-element\" href={`?selected-node=${props.step.id}`}>\n      Failed step: {props.step.name}\n    </a>\n  </div>\n);\n\nexport interface StageViewProps {\n  stage: StageInfo | null;\n  steps: Array<StepInfo>;\n  stepBuffers: Map<string, StepLogBufferInfo>;\n  selectedStage: string;\n  expandedSteps: string[];\n  handleStepToggle: (event: React.SyntheticEvent<{}>, nodeId: string) => void;\n  handleMoreConsoleClick: (nodeId: string, startByte: number) => void;\n  // Id of the element whose scroll bar we wish to use.\n  scrollParentId: string;\n}\n\nexport default class StageView extends React.Component {\n  props!: StageViewProps;\n\n  constructor(props: StageViewProps) {\n    super(props);\n  }\n  renderStageDetails() {\n    if (this.props.stage) {\n      let failedSteps = [] as StepInfo[];\n      for (let step of this.props.steps) {\n        if (step.stageId === this.props.selectedStage) {\n          // We seem to get a mix of upper and lower case states, so normalise on lowercase.\n          if (step.state.toLowerCase() === \"unstable\") {\n            failedSteps.push(step);\n          }\n        }\n      }\n      return (\n        <pre\n          className=\"console-output\"\n          id={`console-root-${this.props.stage ? this.props.stage.id : \"unk\"}`}\n        >\n          <StageSummary stage={this.props.stage} failedSteps={failedSteps} />\n        </pre>\n      );\n    }\n    return null;\n  }\n\n  getTreeItemsFromStepList = (stepsItems: StepInfo[]) => {\n    return stepsItems.map((stepItemData, index) => {\n      return (\n        <ConsoleLogCard\n          step={stepItemData}\n          stepBuffer={\n            this.props.stepBuffers.get(stepItemData.id) ??\n            ({\n              lines: [] as string[],\n              startByte: 0 - LOG_FETCH_SIZE,\n              endByte: -1,\n            } as StepLogBufferInfo)\n          }\n          handleStepToggle={this.props.handleStepToggle}\n          isExpanded={this.props.expandedSteps.includes(stepItemData.id)}\n          handleMoreConsoleClick={this.props.handleMoreConsoleClick}\n          key={`step-console-card-${stepItemData.id}`}\n          scrollParentId={this.props.scrollParentId}\n        />\n      );\n    });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div\n          key={`stage-summary-${\n            this.props.stage ? this.props.stage.id : \"unk\"\n          }`}\n        >\n          {this.renderStageDetails()}\n        </div>\n        <div\n          key={`stage-steps-container-${\n            this.props.stage ? this.props.stage.id : \"unk\"\n          }`}\n        >\n          {this.getTreeItemsFromStepList(this.props.steps)}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n"],"names":["parseEscapeCode","escapeCode","result","isSelectGraphicRendition","match","exec","setFG","setBG","resetFG","resetBG","_step","_iterator","_createForOfIteratorHelper","split","map","str","parseInt","s","n","done","num","value","err","e","f","ConsoleLine","props","ref","useRef","useEffect","height","current","getBoundingClientRect","heightCallback","window","Behaviour","applySubtree","document","getElementById","concat","stepId","lineNumber","React","className","key","id","href","startByte","tokenizedInput","currentState","i","length","codeOrString","classNames","push","join","dangerouslySetInnerHTML","__html","nextState","_objectSpread","makeReactChildren","input","len","loopCounter","escapeCodeIndex","parsedPointer","commentStartIndex","commentEndIndex","indexOf","substring","code","charCodeAt","parsedEscapeCode","substr","tokenizeANSIString","content","ConsoleLogStream","appendInterval","virtuosoRef","_useState2","_slicedToArray","useState","stickToBottom","setStickToBottom","_useState4","moveToBottom","setMoveToBottom","showButtonInterval","_useState6","showButton","setShowButton","_useState8","maxConsoleLineHeight","setMaxConsoleLineHeight","clearInterval","clearTimeout","setTimeout","scrollListBottom","spinnerLines","consoleLineHeightCallback","useCallback","_virtuosoRef$current","logBuffer","lines","scrollBy","top","console","debug","warn","shouldRequestMoreLogs","step","state","Result","running","Virtuoso","style","maxHeight","innerHeight","maxHeightScale","data","components","Footer","itemContent","index","String","atBottomStateChange","bottom","setInterval","handleMoreConsoleClick","followOutput","Button","variant","sx","padding","textTransform","onClick","float","transform","CloseIcon","xmlns","viewBox","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","left","width","margin","bgcolor","color","backdropFilter","border","backgroundColor","borderRadius","boxShadow","overflowY","p","ConsoleLogModal","handleClose","setClose","stepDisplayName","name","stepTitle","title","Modal","open","onClose","Box","Typography","component","noWrap","Stack","direction","alignItems","spacing","StatusIcon","status","percentage","completePercent","fontWeight","truncatedLogWarning","ResizeIcon","lazy","ExpandMore","styled","expand","other","_objectWithoutProperties","_excluded","IconButton","_ref","theme","marginLeft","transition","transitions","create","duration","shortest","ConsoleLogCard","_React$Component","_this","_classCallCheck","_callSuper","handleStepToggle","bind","_inherits","event","this","isExpanded","stepBuffer","_this2","Grid","container","item","xs","sm","align","prettySizeString","LOG_FETCH_SIZE","size","mib","gib","toFixed","_this3","Card","marginBottom","CardActionArea","toLowerCase","wrap","columns","display","flexGrow","getStepHeaderTitle","justifyContent","total","totalDurationMillis","Tooltip","setState","LinkIcon","ExpandMoreIcon","getTruncatedLogWarning","Collapse","in","timeout","unmountOnExit","CardContent","Suspense","fallback","CircularProgress","rootPath","agent","agentName","head","dataset","rooturl","StageSummary","stage","startTimeMillis","ScheduleIcon","started","HourglassEmptyIcon","paused","pauseDurationMillis","TimerIcon","InfoIcon","ComputerIcon","StageNodeLink","failedSteps","FailedStepLink","StageView","stepsItems","stepItemData","_this$props$stepBuffe","stepBuffers","get","endByte","expandedSteps","includes","scrollParentId","steps","stageId","selectedStage","renderStageDetails","getTreeItemsFromStepList"],"sourceRoot":""}